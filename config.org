
* minor settings
** show lines and columns 
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC

** electric
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
			      (?\( .?\))
			      (?\[ .?\])
			      ))

  (electric-pair-mode t) 
#+END_SRC

** clock
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (display-time-mode 1)
#+END_SRC

* Terminal
** setting default shell to bash
#+BEGIN_SRC emacs-lisp
(defvar my-term-shell "/bin/bash")
(defadvice ansi-term (before force-bash)
  (interactive (list my-term-shell)))
(ad-activate 'ansi-term)  
#+END_SRC

* org
** basic config
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window) 
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

** org-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC

* I-do
** enable ido mode 
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)  
#+END_SRC

** ido vertical mode

#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC

** smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC




#+BEGIN_SRC emacs-lisp
** switch buffers
(global-set-key (kbd "C-x C-b") 'ido-switch-buffer)

#+END_SRC

* buffers
** always kill current buffer
#+BEGIN_SRC emacs-lisp
  (defun kill-curr-buffer()
    (interactive)
    ( kill-buffer (current-buffer))
    )
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+END_SRC

** kill all buffers
#+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers()
  (interactive)
  (mapc 'kill-buffer (buffer-list)))

  (global-set-key (kbd "C-M-s-k") 'kill-all-buffers)

#+END_SRC


** enable ibuffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x b") 'ibuffer)

#+END_SRC

* avy
#+BEGIN_SRC emacs-lisp
(use-package avy
:ensure t
:bind
("M-s" . avy-goto-char))
#+END_SRC

* convenient functions
** kill whole word
#+BEGIN_SRC emacs-lisp
  (defun kill-whole-word()
    (interactive)
    (backward-word)
    (kill-word 1))
    (global-set-key (kbd "C-c w w") 'kill-whole-word)
#+END_SRC
** copy whole line 
#+BEGIN_SRC emacs-lisp
  (defun copy-whole-line()
    (interactive)
    (save-excursion
    (kill-new
     (buffer-substring
      (point-at-bol)
      (point-at-eol)))))
  (global-set-key (kbd "C-c w l") 'copy-whole-line)

#+END_SRC

* dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10)))
    (setq dashboard-banner-logo-title "Hii!"))
#+END_SRC

* sudo edit
#+BEGIN_SRC emacs-lisp
  (defun kill-whole-word()
    (interactive)
    (backward-word)
    (kill-word 1))
    (global-set-key (kbd "C-c w w") 'kill-whole-word)
#+END_SRC

* config edit/reload
** edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))

  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** reload 

#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))

  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC

* rainbow
  #+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
:ensure t
:init (rainbow-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode 1))
#+END_SRC

* switch window 
#+BEGIN_SRC emacs-lisp
(use-package switch-window
:ensure t
:config
(setq switch-window-input-style 'minibuffer)
(setq switch-window-increase 4)
(setq switch-window-threshold 2)
(setq switch-window-shortcut-style 'qwerty)
(setq switch-window-shortcuts 
       '("a","s","d","f","h","j","k","l"))
:bind 
([remap other-window] . switch-window))
#+END_SRC

* autocompletion
 
* window splitting function
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
    (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
    (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)

#+END_SRC


* autocomplete
#+BEGIN_SRC emacs-lisp 
    (use-package company
      :ensure t
      :init
      (add-hook 'after-init-hook 'global-company-mode))

#+END_SRC


* modeline 
** spaceline
#+BEGIN_SRC emacs-lisp 
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+END_SRC

* diminish
#+BEGIN_SRC emacs-lisp 
  (use-package diminish
  :ensure t 
:init 
(diminish 'beacon-mode)
(diminish 'which-key-mode)
(diminish 'subword-mode)
(diminish 'rainbow-mode)
)
#+END_SRC



 
